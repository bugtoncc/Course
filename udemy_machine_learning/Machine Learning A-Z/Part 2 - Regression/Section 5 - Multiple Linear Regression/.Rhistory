setwd("D:/GIT/Learning/Udemy_source/Machine Learning A-Z/Part 2 - Regression/Section 5 - Multiple Linear Regression")
setwd("D:/GIT/Learning/Udemy_source/Machine Learning A-Z/Part 2 - Regression/Section 5 - Multiple Linear Regression")
setwd("D:/GIT/Learning/Udemy_source/Machine Learning A-Z/Part 1 - Data Preprocessing")
# Importing the dataset
dataset = read.csv('Data.csv')
# dataset = dataset[, 2:3]
# Splitting the dataset into the Training set and Test set
# install.package('caTools')
library(caTools)
set.seed(123)
setwd("D:/GIT/Learning/Udemy_source/Machine Learning A-Z/Part 2 - Regression/Section 5 - Multiple Linear Regression")
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# dataset = dataset[, 2:3]
View(dataset)
setwd("D:/GIT/Learning/Udemy_source/Machine Learning A-Z/Part 1 - Data Preprocessing")
dataset = read.csv('Data.csv')
# Taking care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No', 'Yes'),
labels = c(0, 1))
View(dataset)
View(dataset)
setwd("D:/GIT/Learning/Udemy_source/Machine Learning A-Z/Part 2 - Regression/Section 5 - Multiple Linear Regression")
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# dataset = dataset[, 2:3]
View(dataset)
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(training_set)
View(test_set)
View(training_set)
regressor = lm(formula = Profit ~ .,
data = training_set)
regressor.summary()
regressor
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spends + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State2,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)) {
regressor = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl) {
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1, 2, 3, 4, 5)]
backwardElimination(training_set, SL)
dataset
dataset[, c(1, 2, 3, 4, 5)]
# Multiple Linear Regression
# Importing the dataset
dataset = read.csv('50_Startups.csv')
# dataset = dataset[, 2:3]
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.package('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set[, 2:3] = scale(training_set[, 2:3])
# test_set[, 2:3] = scale(test_set[, 2:3])
# Fitting Multiple Linear Regression to the Training set
regressor = lm(formula = Profit ~ .,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Building the optimal model using Backward Elimination
# regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
#                data = dataset)
# summary(regressor)
# regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
#                data = dataset)
# summary(regressor)
# regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
#                data = dataset)
# summary(regressor)
# regressor = lm(formula = Profit ~ R.D.Spend,
#                data = dataset)
# summary(regressor)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)) {
regressor = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl) {
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
SL = 0.05
dataset = dataset[, c(1, 2, 3, 4, 5)]
backwardElimination(training_set, SL)
backwardElimination <- function(x, sl) {
numVars = length(x)
for (i in c(1:numVars)) {
regressor = lm(formula = Profit ~ ., data = x)
maxVar = max(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"])
if (maxVar > sl) {
j = which(coef(summary(regressor))[c(2:numVars), "Pr(>|t|)"] == maxVar)
x = x[, -j]
}
numVars = numVars - 1
}
return(summary(regressor))
}
backwardElimination(training_set, SL)
